#!/usr/bin/env ruby

require "bundler/setup"
require "dry/cli"
require "bundler/gem_tasks"
require "tty-prompt"
require "colorize"
require "lookbook"

def info(message)
  puts "→ #{message}".colorize(:blue)
end

def success(message)
  puts "→ #{message}".colorize(:green)
end

def error(message)
  puts "→ #{message}".colorize(color: :red, mode: :bold)
end

def debug(message)
  puts "→ #{message}".colorize(:gray)
end

def ask(question)
  TTY::Prompt.new.ask("\n→ #{question}".colorize(color: :magenta, mode: :bold))
end

module Lookbook
  module Release
    module Commands
      extend Dry::CLI::Registry

      class Bump < Dry::CLI::Command
        desc "Bumps the Lookbook version"

        argument :version, type: :string, required: true, desc: "The version to bump to"
        option :dry_run, type: :boolean, default: false, desc: "Perform a dry run (no actual file changes)"

        def current_version
          Lookbook::VERSION.to_s
        end

        def version_file_path
          File.expand_path("#{File.dirname(__FILE__)}/../lib/lookbook/version.rb")
        end

        def gemspec_file_path
          File.expand_path("#{File.dirname(__FILE__)}/../lookbook.gemspec")
        end

        def call(version:, dry_run: false)
          new_version = version.gsub("v", "").tr("-", ".")

          info "Bumping Lookbook version from #{current_version} to #{new_version}..."

          if dry_run
            debug "[dry-run] Version file #{version_file} not updated."
          else
            version_file = File.open(version_file_path)
            version_file_contents = version_file.read
            File.write(version_file_path, version_file_contents.gsub(current_version, new_version))
            debug "Updated version file #{version_file}"

            gemspec_file = File.open(gemspec_file_path)
            gemspec_file_contents = gemspec_file.read
            File.write(gemspec_file_path, gemspec_file_contents.gsub(current_version, new_version))
            debug "Updated gemspec file #{version_file}"
          end

          success "Version bump to #{new_version} complete."
        end
      end

      class Publish < Dry::CLI::Command
        desc "Publishes the Lookbook gem to RubyGems"

        option :dry_run, type: :boolean, default: false, desc: "Perform a dry run (no actual file changes)"
        option :otp, type: :string, default: nil, desc: "RubyGems publish OTP code"

        def pkg_dir
          File.expand_path("#{File.dirname(__FILE__)}/../pkg")
        end

        def call(dry_run:, otp: nil)
          version = Lookbook::VERSION

          info "Packaging Lookbook #{version}..."
          if dry_run
            debug "[dry-run] Gem not packaged into #{pkg_dir}."
          else
            Rake::Task["build"].execute
          end
          success "Gem packaging complete."

          info "Publishing Lookbook #{version} to RubyGems..."

          otp ||= ask("Please provide RubyGems OPT code:")
          raise ArgumentError, "OTP code cannot be blank." unless otp.present?

          if dry_run
            debug "[dry-run] Gem not pushed to RubyGems (OTP code: #{otp})"
            success("Lookbook #{version} successfully published.")
          elsif system("gem push #{pkg_dir}/lookbook-#{version}.gem --otp=#{otp}")
            success("Lookbook #{version} successfully published.")
          else
            error("Error pushing gem to RubyGems")
          end
        rescue
          error "Error publishing gem."
        end
      end

      class Start < Dry::CLI::Command
        desc "Starts the release process"

        option :dry_run, type: :boolean, default: false, desc: "Perform a dry run (no actual file changes)"

        def call(dry_run:)
          if system("npm run release #{" -- --dry-run" if dry_run}")
            system("bin/release publish")
          end
        end
      end

      register "start", Start
      register "bump", Bump
      register "publish", Publish
    end
  end
end

Dry::CLI.new(Lookbook::Release::Commands).call
